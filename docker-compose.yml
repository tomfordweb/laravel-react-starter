version: "3.8"

services:
  # App proxy and LB
  app-proxy:
    image: nginx:alpine
    ports:
      - 80:80
    volumes:
      - ./nginx/primary/conf.d/:/etc/nginx/conf.d/
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
      - backend-proxy
    networks:
      - app-network


  frontend:
    build:
      context: ./frontend
    entrypoint: npm start
    ports:
      - 3000:3000
    networks:
      - app-network

  #PHP Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    tty: true
    environment:
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${MYSQL_DATABASE?Not set}
      DB_USERNAME: root
      DB_PASSWORD: ${MYSQL_ROOT_PASSWORD?Not set}
    working_dir: /var/www
    volumes:
      - ./backend:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  #Nginx Service
  backend-proxy:
    image: nginx:alpine
    container_name: webserver
    volumes:
      - ./backend:/var/www
      - ./nginx/backend/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network

  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE?Not set}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD?Not set}
      SERVICE_TAGS: ${SERVICE_TAGS?Not set}
      SERVICE_NAME: ${SERVICE_NAME?Not set}
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  dbdata:

    driver: local
